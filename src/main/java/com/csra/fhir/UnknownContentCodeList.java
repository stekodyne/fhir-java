//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.10.29 at 04:21:59 PM PDT 
//


package com.csra.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for UnknownContentCode-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="UnknownContentCode-list">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="no"/>
 *     &lt;enumeration value="extensions"/>
 *     &lt;enumeration value="elements"/>
 *     &lt;enumeration value="both"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "UnknownContentCode-list")
@XmlEnum
public enum UnknownContentCodeList {


    /**
     * The application does not accept either unknown elements or extensions.
     * 
     */
    @XmlEnumValue("no")
    NO("no"),

    /**
     * The application accepts unknown extensions, but not unknown elements.
     * 
     */
    @XmlEnumValue("extensions")
    EXTENSIONS("extensions"),

    /**
     * The application accepts unknown elements, but not unknown extensions.
     * 
     */
    @XmlEnumValue("elements")
    ELEMENTS("elements"),

    /**
     * The application accepts unknown elements and extensions.
     * 
     */
    @XmlEnumValue("both")
    BOTH("both");
    private final java.lang.String value;

    UnknownContentCodeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static UnknownContentCodeList fromValue(java.lang.String v) {
        for (UnknownContentCodeList c: UnknownContentCodeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
