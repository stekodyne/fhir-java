//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.11 at 12:22:25 PM PST 
//


package com.csra.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for NamingSystemType-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="NamingSystemType-list">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="codesystem"/>
 *     &lt;enumeration value="identifier"/>
 *     &lt;enumeration value="root"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "NamingSystemType-list")
@XmlEnum
public enum NamingSystemTypeList {


    /**
     * The naming system is used to define concepts and symbols to represent those concepts; e.g. UCUM, LOINC, NDC code, local lab codes, etc.
     * 
     */
    @XmlEnumValue("codesystem")
    CODESYSTEM("codesystem"),

    /**
     * The naming system is used to manage identifiers (e.g. license numbers, order numbers, etc.).
     * 
     */
    @XmlEnumValue("identifier")
    IDENTIFIER("identifier"),

    /**
     * The naming system is used as the root for other identifiers and naming systems.
     * 
     */
    @XmlEnumValue("root")
    ROOT("root");
    private final java.lang.String value;

    NamingSystemTypeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static NamingSystemTypeList fromValue(java.lang.String v) {
        for (NamingSystemTypeList c: NamingSystemTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
