//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.01.14 at 04:53:11 PM PST 
//


package com.csra.fhir;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 * 
 * <p>Java class for ElementDefinition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ElementDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Element">
 *       &lt;sequence>
 *         &lt;element name="path" type="{http://hl7.org/fhir}string"/>
 *         &lt;element name="representation" type="{http://hl7.org/fhir}PropertyRepresentation" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="label" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="code" type="{http://hl7.org/fhir}Coding" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="slicing" type="{http://hl7.org/fhir}ElementDefinition.Slicing" minOccurs="0"/>
 *         &lt;element name="short" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="definition" type="{http://hl7.org/fhir}markdown" minOccurs="0"/>
 *         &lt;element name="comments" type="{http://hl7.org/fhir}markdown" minOccurs="0"/>
 *         &lt;element name="requirements" type="{http://hl7.org/fhir}markdown" minOccurs="0"/>
 *         &lt;element name="alias" type="{http://hl7.org/fhir}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="min" type="{http://hl7.org/fhir}integer" minOccurs="0"/>
 *         &lt;element name="max" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="base" type="{http://hl7.org/fhir}ElementDefinition.Base" minOccurs="0"/>
 *         &lt;element name="type" type="{http://hl7.org/fhir}ElementDefinition.Type" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="nameReference" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="defaultValueBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="defaultValueInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="defaultValueDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="defaultValueBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="defaultValueInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="defaultValueString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="defaultValueUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="defaultValueDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="defaultValueDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="defaultValueTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="defaultValueCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="defaultValueOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="defaultValueUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="defaultValueId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="defaultValueUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="defaultValuePositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="defaultValueMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="defaultValueAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="defaultValueAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="defaultValueIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="defaultValueCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="defaultValueCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="defaultValueQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="defaultValueRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="defaultValuePeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="defaultValueRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="defaultValueReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="defaultValueSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="defaultValueSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="defaultValueHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="defaultValueAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="defaultValueContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="defaultValueTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="defaultValueMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;element name="meaningWhenMissing" type="{http://hl7.org/fhir}markdown" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="fixedBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="fixedInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="fixedDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="fixedBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="fixedInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="fixedString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="fixedUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="fixedDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="fixedDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="fixedTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="fixedCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="fixedOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="fixedUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="fixedId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="fixedUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="fixedPositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="fixedMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="fixedAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="fixedAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="fixedIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="fixedCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="fixedCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="fixedQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="fixedRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="fixedPeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="fixedRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="fixedReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="fixedSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="fixedSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="fixedHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="fixedAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="fixedContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="fixedTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="fixedMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="patternBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="patternInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="patternDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="patternBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="patternInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="patternString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="patternUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="patternDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="patternDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="patternTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="patternCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="patternOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="patternUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="patternId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="patternUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="patternPositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="patternMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="patternAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="patternAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="patternIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="patternCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="patternCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="patternQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="patternRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="patternPeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="patternRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="patternReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="patternSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="patternSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="patternHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="patternAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="patternContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="patternTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="patternMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="exampleBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="exampleInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="exampleDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="exampleBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="exampleInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="exampleString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="exampleUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="exampleDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="exampleDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="exampleTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="exampleCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="exampleOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="exampleUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="exampleId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="exampleUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="examplePositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="exampleMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="exampleAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="exampleAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="exampleIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="exampleCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="exampleCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="exampleQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="exampleRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="examplePeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="exampleRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="exampleReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="exampleSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="exampleSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="exampleHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="exampleAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="exampleContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="exampleTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="exampleMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="minValueBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="minValueInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="minValueDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="minValueBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="minValueInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="minValueString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="minValueUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="minValueDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="minValueDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="minValueTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="minValueCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="minValueOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="minValueUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="minValueId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="minValueUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="minValuePositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="minValueMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="minValueAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="minValueAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="minValueIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="minValueCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="minValueCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="minValueQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="minValueRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="minValuePeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="minValueRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="minValueReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="minValueSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="minValueSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="minValueHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="minValueAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="minValueContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="minValueTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="minValueMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="maxValueBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="maxValueInteger" type="{http://hl7.org/fhir}integer"/>
 *           &lt;element name="maxValueDecimal" type="{http://hl7.org/fhir}decimal"/>
 *           &lt;element name="maxValueBase64Binary" type="{http://hl7.org/fhir}base64Binary"/>
 *           &lt;element name="maxValueInstant" type="{http://hl7.org/fhir}instant"/>
 *           &lt;element name="maxValueString" type="{http://hl7.org/fhir}string"/>
 *           &lt;element name="maxValueUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="maxValueDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="maxValueDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="maxValueTime" type="{http://hl7.org/fhir}time"/>
 *           &lt;element name="maxValueCode" type="{http://hl7.org/fhir}code"/>
 *           &lt;element name="maxValueOid" type="{http://hl7.org/fhir}oid"/>
 *           &lt;element name="maxValueUuid" type="{http://hl7.org/fhir}uuid"/>
 *           &lt;element name="maxValueId" type="{http://hl7.org/fhir}id"/>
 *           &lt;element name="maxValueUnsignedInt" type="{http://hl7.org/fhir}unsignedInt"/>
 *           &lt;element name="maxValuePositiveInt" type="{http://hl7.org/fhir}positiveInt"/>
 *           &lt;element name="maxValueMarkdown" type="{http://hl7.org/fhir}markdown"/>
 *           &lt;element name="maxValueAnnotation" type="{http://hl7.org/fhir}Annotation"/>
 *           &lt;element name="maxValueAttachment" type="{http://hl7.org/fhir}Attachment"/>
 *           &lt;element name="maxValueIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *           &lt;element name="maxValueCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="maxValueCoding" type="{http://hl7.org/fhir}Coding"/>
 *           &lt;element name="maxValueQuantity" type="{http://hl7.org/fhir}Quantity"/>
 *           &lt;element name="maxValueRange" type="{http://hl7.org/fhir}Range"/>
 *           &lt;element name="maxValuePeriod" type="{http://hl7.org/fhir}Period"/>
 *           &lt;element name="maxValueRatio" type="{http://hl7.org/fhir}Ratio"/>
 *           &lt;element name="maxValueReference" type="{http://hl7.org/fhir}Reference"/>
 *           &lt;element name="maxValueSampledData" type="{http://hl7.org/fhir}SampledData"/>
 *           &lt;element name="maxValueSignature" type="{http://hl7.org/fhir}Signature"/>
 *           &lt;element name="maxValueHumanName" type="{http://hl7.org/fhir}HumanName"/>
 *           &lt;element name="maxValueAddress" type="{http://hl7.org/fhir}Address"/>
 *           &lt;element name="maxValueContactPoint" type="{http://hl7.org/fhir}ContactPoint"/>
 *           &lt;element name="maxValueTiming" type="{http://hl7.org/fhir}Timing"/>
 *           &lt;element name="maxValueMeta" type="{http://hl7.org/fhir}Meta"/>
 *         &lt;/choice>
 *         &lt;element name="maxLength" type="{http://hl7.org/fhir}integer" minOccurs="0"/>
 *         &lt;element name="condition" type="{http://hl7.org/fhir}id" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="constraint" type="{http://hl7.org/fhir}ElementDefinition.Constraint" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="mustSupport" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="isModifier" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="isSummary" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="binding" type="{http://hl7.org/fhir}ElementDefinition.Binding" minOccurs="0"/>
 *         &lt;element name="mapping" type="{http://hl7.org/fhir}ElementDefinition.Mapping" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ElementDefinition", propOrder = {
    "path",
    "representation",
    "name",
    "label",
    "code",
    "slicing",
    "_short",
    "definition",
    "comments",
    "requirements",
    "alias",
    "min",
    "max",
    "base",
    "type",
    "nameReference",
    "defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal",
    "meaningWhenMissing",
    "fixedBooleanOrFixedIntegerOrFixedDecimal",
    "patternBooleanOrPatternIntegerOrPatternDecimal",
    "exampleBooleanOrExampleIntegerOrExampleDecimal",
    "minValueBooleanOrMinValueIntegerOrMinValueDecimal",
    "maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal",
    "maxLength",
    "condition",
    "constraint",
    "mustSupport",
    "isModifier",
    "isSummary",
    "binding",
    "mapping"
})
public class ElementDefinition
    extends Element
{

    @XmlElement(required = true)
    protected String path;
    protected List<PropertyRepresentation> representation;
    protected String name;
    protected String label;
    protected List<Coding> code;
    protected ElementDefinitionSlicing slicing;
    @XmlElement(name = "short")
    protected String _short;
    protected Markdown definition;
    protected Markdown comments;
    protected Markdown requirements;
    protected List<String> alias;
    protected Integer min;
    protected String max;
    protected ElementDefinitionBase base;
    protected List<ElementDefinitionType> type;
    protected String nameReference;
    @XmlElements({
        @XmlElement(name = "defaultValueBoolean", type = Boolean.class),
        @XmlElement(name = "defaultValueInteger", type = Integer.class),
        @XmlElement(name = "defaultValueDecimal", type = Decimal.class),
        @XmlElement(name = "defaultValueBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "defaultValueInstant", type = Instant.class),
        @XmlElement(name = "defaultValueString", type = String.class),
        @XmlElement(name = "defaultValueUri", type = Uri.class),
        @XmlElement(name = "defaultValueDate", type = Date.class),
        @XmlElement(name = "defaultValueDateTime", type = DateTime.class),
        @XmlElement(name = "defaultValueTime", type = Time.class),
        @XmlElement(name = "defaultValueCode", type = Code.class),
        @XmlElement(name = "defaultValueOid", type = Oid.class),
        @XmlElement(name = "defaultValueUuid", type = Uuid.class),
        @XmlElement(name = "defaultValueId", type = Id.class),
        @XmlElement(name = "defaultValueUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "defaultValuePositiveInt", type = PositiveInt.class),
        @XmlElement(name = "defaultValueMarkdown", type = Markdown.class),
        @XmlElement(name = "defaultValueAnnotation", type = Annotation.class),
        @XmlElement(name = "defaultValueAttachment", type = Attachment.class),
        @XmlElement(name = "defaultValueIdentifier", type = Identifier.class),
        @XmlElement(name = "defaultValueCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "defaultValueCoding", type = Coding.class),
        @XmlElement(name = "defaultValueQuantity", type = Quantity.class),
        @XmlElement(name = "defaultValueRange", type = Range.class),
        @XmlElement(name = "defaultValuePeriod", type = Period.class),
        @XmlElement(name = "defaultValueRatio", type = Ratio.class),
        @XmlElement(name = "defaultValueReference", type = Reference.class),
        @XmlElement(name = "defaultValueSampledData", type = SampledData.class),
        @XmlElement(name = "defaultValueSignature", type = Signature.class),
        @XmlElement(name = "defaultValueHumanName", type = HumanName.class),
        @XmlElement(name = "defaultValueAddress", type = Address.class),
        @XmlElement(name = "defaultValueContactPoint", type = ContactPoint.class),
        @XmlElement(name = "defaultValueTiming", type = Timing.class),
        @XmlElement(name = "defaultValueMeta", type = Meta.class)
    })
    protected Element defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal;
    protected Markdown meaningWhenMissing;
    @XmlElements({
        @XmlElement(name = "fixedBoolean", type = Boolean.class),
        @XmlElement(name = "fixedInteger", type = Integer.class),
        @XmlElement(name = "fixedDecimal", type = Decimal.class),
        @XmlElement(name = "fixedBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "fixedInstant", type = Instant.class),
        @XmlElement(name = "fixedString", type = String.class),
        @XmlElement(name = "fixedUri", type = Uri.class),
        @XmlElement(name = "fixedDate", type = Date.class),
        @XmlElement(name = "fixedDateTime", type = DateTime.class),
        @XmlElement(name = "fixedTime", type = Time.class),
        @XmlElement(name = "fixedCode", type = Code.class),
        @XmlElement(name = "fixedOid", type = Oid.class),
        @XmlElement(name = "fixedUuid", type = Uuid.class),
        @XmlElement(name = "fixedId", type = Id.class),
        @XmlElement(name = "fixedUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "fixedPositiveInt", type = PositiveInt.class),
        @XmlElement(name = "fixedMarkdown", type = Markdown.class),
        @XmlElement(name = "fixedAnnotation", type = Annotation.class),
        @XmlElement(name = "fixedAttachment", type = Attachment.class),
        @XmlElement(name = "fixedIdentifier", type = Identifier.class),
        @XmlElement(name = "fixedCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "fixedCoding", type = Coding.class),
        @XmlElement(name = "fixedQuantity", type = Quantity.class),
        @XmlElement(name = "fixedRange", type = Range.class),
        @XmlElement(name = "fixedPeriod", type = Period.class),
        @XmlElement(name = "fixedRatio", type = Ratio.class),
        @XmlElement(name = "fixedReference", type = Reference.class),
        @XmlElement(name = "fixedSampledData", type = SampledData.class),
        @XmlElement(name = "fixedSignature", type = Signature.class),
        @XmlElement(name = "fixedHumanName", type = HumanName.class),
        @XmlElement(name = "fixedAddress", type = Address.class),
        @XmlElement(name = "fixedContactPoint", type = ContactPoint.class),
        @XmlElement(name = "fixedTiming", type = Timing.class),
        @XmlElement(name = "fixedMeta", type = Meta.class)
    })
    protected Element fixedBooleanOrFixedIntegerOrFixedDecimal;
    @XmlElements({
        @XmlElement(name = "patternBoolean", type = Boolean.class),
        @XmlElement(name = "patternInteger", type = Integer.class),
        @XmlElement(name = "patternDecimal", type = Decimal.class),
        @XmlElement(name = "patternBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "patternInstant", type = Instant.class),
        @XmlElement(name = "patternString", type = String.class),
        @XmlElement(name = "patternUri", type = Uri.class),
        @XmlElement(name = "patternDate", type = Date.class),
        @XmlElement(name = "patternDateTime", type = DateTime.class),
        @XmlElement(name = "patternTime", type = Time.class),
        @XmlElement(name = "patternCode", type = Code.class),
        @XmlElement(name = "patternOid", type = Oid.class),
        @XmlElement(name = "patternUuid", type = Uuid.class),
        @XmlElement(name = "patternId", type = Id.class),
        @XmlElement(name = "patternUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "patternPositiveInt", type = PositiveInt.class),
        @XmlElement(name = "patternMarkdown", type = Markdown.class),
        @XmlElement(name = "patternAnnotation", type = Annotation.class),
        @XmlElement(name = "patternAttachment", type = Attachment.class),
        @XmlElement(name = "patternIdentifier", type = Identifier.class),
        @XmlElement(name = "patternCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "patternCoding", type = Coding.class),
        @XmlElement(name = "patternQuantity", type = Quantity.class),
        @XmlElement(name = "patternRange", type = Range.class),
        @XmlElement(name = "patternPeriod", type = Period.class),
        @XmlElement(name = "patternRatio", type = Ratio.class),
        @XmlElement(name = "patternReference", type = Reference.class),
        @XmlElement(name = "patternSampledData", type = SampledData.class),
        @XmlElement(name = "patternSignature", type = Signature.class),
        @XmlElement(name = "patternHumanName", type = HumanName.class),
        @XmlElement(name = "patternAddress", type = Address.class),
        @XmlElement(name = "patternContactPoint", type = ContactPoint.class),
        @XmlElement(name = "patternTiming", type = Timing.class),
        @XmlElement(name = "patternMeta", type = Meta.class)
    })
    protected Element patternBooleanOrPatternIntegerOrPatternDecimal;
    @XmlElements({
        @XmlElement(name = "exampleBoolean", type = Boolean.class),
        @XmlElement(name = "exampleInteger", type = Integer.class),
        @XmlElement(name = "exampleDecimal", type = Decimal.class),
        @XmlElement(name = "exampleBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "exampleInstant", type = Instant.class),
        @XmlElement(name = "exampleString", type = String.class),
        @XmlElement(name = "exampleUri", type = Uri.class),
        @XmlElement(name = "exampleDate", type = Date.class),
        @XmlElement(name = "exampleDateTime", type = DateTime.class),
        @XmlElement(name = "exampleTime", type = Time.class),
        @XmlElement(name = "exampleCode", type = Code.class),
        @XmlElement(name = "exampleOid", type = Oid.class),
        @XmlElement(name = "exampleUuid", type = Uuid.class),
        @XmlElement(name = "exampleId", type = Id.class),
        @XmlElement(name = "exampleUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "examplePositiveInt", type = PositiveInt.class),
        @XmlElement(name = "exampleMarkdown", type = Markdown.class),
        @XmlElement(name = "exampleAnnotation", type = Annotation.class),
        @XmlElement(name = "exampleAttachment", type = Attachment.class),
        @XmlElement(name = "exampleIdentifier", type = Identifier.class),
        @XmlElement(name = "exampleCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "exampleCoding", type = Coding.class),
        @XmlElement(name = "exampleQuantity", type = Quantity.class),
        @XmlElement(name = "exampleRange", type = Range.class),
        @XmlElement(name = "examplePeriod", type = Period.class),
        @XmlElement(name = "exampleRatio", type = Ratio.class),
        @XmlElement(name = "exampleReference", type = Reference.class),
        @XmlElement(name = "exampleSampledData", type = SampledData.class),
        @XmlElement(name = "exampleSignature", type = Signature.class),
        @XmlElement(name = "exampleHumanName", type = HumanName.class),
        @XmlElement(name = "exampleAddress", type = Address.class),
        @XmlElement(name = "exampleContactPoint", type = ContactPoint.class),
        @XmlElement(name = "exampleTiming", type = Timing.class),
        @XmlElement(name = "exampleMeta", type = Meta.class)
    })
    protected Element exampleBooleanOrExampleIntegerOrExampleDecimal;
    @XmlElements({
        @XmlElement(name = "minValueBoolean", type = Boolean.class),
        @XmlElement(name = "minValueInteger", type = Integer.class),
        @XmlElement(name = "minValueDecimal", type = Decimal.class),
        @XmlElement(name = "minValueBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "minValueInstant", type = Instant.class),
        @XmlElement(name = "minValueString", type = String.class),
        @XmlElement(name = "minValueUri", type = Uri.class),
        @XmlElement(name = "minValueDate", type = Date.class),
        @XmlElement(name = "minValueDateTime", type = DateTime.class),
        @XmlElement(name = "minValueTime", type = Time.class),
        @XmlElement(name = "minValueCode", type = Code.class),
        @XmlElement(name = "minValueOid", type = Oid.class),
        @XmlElement(name = "minValueUuid", type = Uuid.class),
        @XmlElement(name = "minValueId", type = Id.class),
        @XmlElement(name = "minValueUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "minValuePositiveInt", type = PositiveInt.class),
        @XmlElement(name = "minValueMarkdown", type = Markdown.class),
        @XmlElement(name = "minValueAnnotation", type = Annotation.class),
        @XmlElement(name = "minValueAttachment", type = Attachment.class),
        @XmlElement(name = "minValueIdentifier", type = Identifier.class),
        @XmlElement(name = "minValueCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "minValueCoding", type = Coding.class),
        @XmlElement(name = "minValueQuantity", type = Quantity.class),
        @XmlElement(name = "minValueRange", type = Range.class),
        @XmlElement(name = "minValuePeriod", type = Period.class),
        @XmlElement(name = "minValueRatio", type = Ratio.class),
        @XmlElement(name = "minValueReference", type = Reference.class),
        @XmlElement(name = "minValueSampledData", type = SampledData.class),
        @XmlElement(name = "minValueSignature", type = Signature.class),
        @XmlElement(name = "minValueHumanName", type = HumanName.class),
        @XmlElement(name = "minValueAddress", type = Address.class),
        @XmlElement(name = "minValueContactPoint", type = ContactPoint.class),
        @XmlElement(name = "minValueTiming", type = Timing.class),
        @XmlElement(name = "minValueMeta", type = Meta.class)
    })
    protected Element minValueBooleanOrMinValueIntegerOrMinValueDecimal;
    @XmlElements({
        @XmlElement(name = "maxValueBoolean", type = Boolean.class),
        @XmlElement(name = "maxValueInteger", type = Integer.class),
        @XmlElement(name = "maxValueDecimal", type = Decimal.class),
        @XmlElement(name = "maxValueBase64Binary", type = Base64Binary.class),
        @XmlElement(name = "maxValueInstant", type = Instant.class),
        @XmlElement(name = "maxValueString", type = String.class),
        @XmlElement(name = "maxValueUri", type = Uri.class),
        @XmlElement(name = "maxValueDate", type = Date.class),
        @XmlElement(name = "maxValueDateTime", type = DateTime.class),
        @XmlElement(name = "maxValueTime", type = Time.class),
        @XmlElement(name = "maxValueCode", type = Code.class),
        @XmlElement(name = "maxValueOid", type = Oid.class),
        @XmlElement(name = "maxValueUuid", type = Uuid.class),
        @XmlElement(name = "maxValueId", type = Id.class),
        @XmlElement(name = "maxValueUnsignedInt", type = UnsignedInt.class),
        @XmlElement(name = "maxValuePositiveInt", type = PositiveInt.class),
        @XmlElement(name = "maxValueMarkdown", type = Markdown.class),
        @XmlElement(name = "maxValueAnnotation", type = Annotation.class),
        @XmlElement(name = "maxValueAttachment", type = Attachment.class),
        @XmlElement(name = "maxValueIdentifier", type = Identifier.class),
        @XmlElement(name = "maxValueCodeableConcept", type = CodeableConcept.class),
        @XmlElement(name = "maxValueCoding", type = Coding.class),
        @XmlElement(name = "maxValueQuantity", type = Quantity.class),
        @XmlElement(name = "maxValueRange", type = Range.class),
        @XmlElement(name = "maxValuePeriod", type = Period.class),
        @XmlElement(name = "maxValueRatio", type = Ratio.class),
        @XmlElement(name = "maxValueReference", type = Reference.class),
        @XmlElement(name = "maxValueSampledData", type = SampledData.class),
        @XmlElement(name = "maxValueSignature", type = Signature.class),
        @XmlElement(name = "maxValueHumanName", type = HumanName.class),
        @XmlElement(name = "maxValueAddress", type = Address.class),
        @XmlElement(name = "maxValueContactPoint", type = ContactPoint.class),
        @XmlElement(name = "maxValueTiming", type = Timing.class),
        @XmlElement(name = "maxValueMeta", type = Meta.class)
    })
    protected Element maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal;
    protected Integer maxLength;
    protected List<Id> condition;
    protected List<ElementDefinitionConstraint> constraint;
    protected Boolean mustSupport;
    protected Boolean isModifier;
    protected Boolean isSummary;
    protected ElementDefinitionBinding binding;
    protected List<ElementDefinitionMapping> mapping;

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPath(String value) {
        this.path = value;
    }

    /**
     * Gets the value of the representation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PropertyRepresentation }
     * 
     * 
     */
    public List<PropertyRepresentation> getRepresentation() {
        if (representation == null) {
            representation = new ArrayList<PropertyRepresentation>();
        }
        return this.representation;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the label property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLabel() {
        return label;
    }

    /**
     * Sets the value of the label property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLabel(String value) {
        this.label = value;
    }

    /**
     * Gets the value of the code property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the code property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Coding }
     * 
     * 
     */
    public List<Coding> getCode() {
        if (code == null) {
            code = new ArrayList<Coding>();
        }
        return this.code;
    }

    /**
     * Gets the value of the slicing property.
     * 
     * @return
     *     possible object is
     *     {@link ElementDefinitionSlicing }
     *     
     */
    public ElementDefinitionSlicing getSlicing() {
        return slicing;
    }

    /**
     * Sets the value of the slicing property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementDefinitionSlicing }
     *     
     */
    public void setSlicing(ElementDefinitionSlicing value) {
        this.slicing = value;
    }

    /**
     * Gets the value of the short property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShort() {
        return _short;
    }

    /**
     * Sets the value of the short property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShort(String value) {
        this._short = value;
    }

    /**
     * Gets the value of the definition property.
     * 
     * @return
     *     possible object is
     *     {@link Markdown }
     *     
     */
    public Markdown getDefinition() {
        return definition;
    }

    /**
     * Sets the value of the definition property.
     * 
     * @param value
     *     allowed object is
     *     {@link Markdown }
     *     
     */
    public void setDefinition(Markdown value) {
        this.definition = value;
    }

    /**
     * Gets the value of the comments property.
     * 
     * @return
     *     possible object is
     *     {@link Markdown }
     *     
     */
    public Markdown getComments() {
        return comments;
    }

    /**
     * Sets the value of the comments property.
     * 
     * @param value
     *     allowed object is
     *     {@link Markdown }
     *     
     */
    public void setComments(Markdown value) {
        this.comments = value;
    }

    /**
     * Gets the value of the requirements property.
     * 
     * @return
     *     possible object is
     *     {@link Markdown }
     *     
     */
    public Markdown getRequirements() {
        return requirements;
    }

    /**
     * Sets the value of the requirements property.
     * 
     * @param value
     *     allowed object is
     *     {@link Markdown }
     *     
     */
    public void setRequirements(Markdown value) {
        this.requirements = value;
    }

    /**
     * Gets the value of the alias property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alias property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlias().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getAlias() {
        if (alias == null) {
            alias = new ArrayList<String>();
        }
        return this.alias;
    }

    /**
     * Gets the value of the min property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMin() {
        return min;
    }

    /**
     * Sets the value of the min property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMin(Integer value) {
        this.min = value;
    }

    /**
     * Gets the value of the max property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMax() {
        return max;
    }

    /**
     * Sets the value of the max property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMax(String value) {
        this.max = value;
    }

    /**
     * Gets the value of the base property.
     * 
     * @return
     *     possible object is
     *     {@link ElementDefinitionBase }
     *     
     */
    public ElementDefinitionBase getBase() {
        return base;
    }

    /**
     * Sets the value of the base property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementDefinitionBase }
     *     
     */
    public void setBase(ElementDefinitionBase value) {
        this.base = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the type property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ElementDefinitionType }
     * 
     * 
     */
    public List<ElementDefinitionType> getType() {
        if (type == null) {
            type = new ArrayList<ElementDefinitionType>();
        }
        return this.type;
    }

    /**
     * Gets the value of the nameReference property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNameReference() {
        return nameReference;
    }

    /**
     * Sets the value of the nameReference property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNameReference(String value) {
        this.nameReference = value;
    }

    /**
     * Gets the value of the defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getDefaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal() {
        return defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal;
    }

    /**
     * Sets the value of the defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setDefaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal(Element value) {
        this.defaultValueBooleanOrDefaultValueIntegerOrDefaultValueDecimal = value;
    }

    /**
     * Gets the value of the meaningWhenMissing property.
     * 
     * @return
     *     possible object is
     *     {@link Markdown }
     *     
     */
    public Markdown getMeaningWhenMissing() {
        return meaningWhenMissing;
    }

    /**
     * Sets the value of the meaningWhenMissing property.
     * 
     * @param value
     *     allowed object is
     *     {@link Markdown }
     *     
     */
    public void setMeaningWhenMissing(Markdown value) {
        this.meaningWhenMissing = value;
    }

    /**
     * Gets the value of the fixedBooleanOrFixedIntegerOrFixedDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getFixedBooleanOrFixedIntegerOrFixedDecimal() {
        return fixedBooleanOrFixedIntegerOrFixedDecimal;
    }

    /**
     * Sets the value of the fixedBooleanOrFixedIntegerOrFixedDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setFixedBooleanOrFixedIntegerOrFixedDecimal(Element value) {
        this.fixedBooleanOrFixedIntegerOrFixedDecimal = value;
    }

    /**
     * Gets the value of the patternBooleanOrPatternIntegerOrPatternDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getPatternBooleanOrPatternIntegerOrPatternDecimal() {
        return patternBooleanOrPatternIntegerOrPatternDecimal;
    }

    /**
     * Sets the value of the patternBooleanOrPatternIntegerOrPatternDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setPatternBooleanOrPatternIntegerOrPatternDecimal(Element value) {
        this.patternBooleanOrPatternIntegerOrPatternDecimal = value;
    }

    /**
     * Gets the value of the exampleBooleanOrExampleIntegerOrExampleDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getExampleBooleanOrExampleIntegerOrExampleDecimal() {
        return exampleBooleanOrExampleIntegerOrExampleDecimal;
    }

    /**
     * Sets the value of the exampleBooleanOrExampleIntegerOrExampleDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setExampleBooleanOrExampleIntegerOrExampleDecimal(Element value) {
        this.exampleBooleanOrExampleIntegerOrExampleDecimal = value;
    }

    /**
     * Gets the value of the minValueBooleanOrMinValueIntegerOrMinValueDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getMinValueBooleanOrMinValueIntegerOrMinValueDecimal() {
        return minValueBooleanOrMinValueIntegerOrMinValueDecimal;
    }

    /**
     * Sets the value of the minValueBooleanOrMinValueIntegerOrMinValueDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setMinValueBooleanOrMinValueIntegerOrMinValueDecimal(Element value) {
        this.minValueBooleanOrMinValueIntegerOrMinValueDecimal = value;
    }

    /**
     * Gets the value of the maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public Element getMaxValueBooleanOrMaxValueIntegerOrMaxValueDecimal() {
        return maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal;
    }

    /**
     * Sets the value of the maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     {@link Integer }
     *     {@link Decimal }
     *     {@link Base64Binary }
     *     {@link Instant }
     *     {@link String }
     *     {@link Uri }
     *     {@link Date }
     *     {@link DateTime }
     *     {@link Time }
     *     {@link Code }
     *     {@link Oid }
     *     {@link Uuid }
     *     {@link Id }
     *     {@link UnsignedInt }
     *     {@link PositiveInt }
     *     {@link Markdown }
     *     {@link Annotation }
     *     {@link Attachment }
     *     {@link Identifier }
     *     {@link CodeableConcept }
     *     {@link Coding }
     *     {@link Quantity }
     *     {@link Range }
     *     {@link Period }
     *     {@link Ratio }
     *     {@link Reference }
     *     {@link SampledData }
     *     {@link Signature }
     *     {@link HumanName }
     *     {@link Address }
     *     {@link ContactPoint }
     *     {@link Timing }
     *     {@link Meta }
     *     
     */
    public void setMaxValueBooleanOrMaxValueIntegerOrMaxValueDecimal(Element value) {
        this.maxValueBooleanOrMaxValueIntegerOrMaxValueDecimal = value;
    }

    /**
     * Gets the value of the maxLength property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaxLength() {
        return maxLength;
    }

    /**
     * Sets the value of the maxLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMaxLength(Integer value) {
        this.maxLength = value;
    }

    /**
     * Gets the value of the condition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the condition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCondition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Id }
     * 
     * 
     */
    public List<Id> getCondition() {
        if (condition == null) {
            condition = new ArrayList<Id>();
        }
        return this.condition;
    }

    /**
     * Gets the value of the constraint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the constraint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConstraint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ElementDefinitionConstraint }
     * 
     * 
     */
    public List<ElementDefinitionConstraint> getConstraint() {
        if (constraint == null) {
            constraint = new ArrayList<ElementDefinitionConstraint>();
        }
        return this.constraint;
    }

    /**
     * Gets the value of the mustSupport property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean getMustSupport() {
        return mustSupport;
    }

    /**
     * Sets the value of the mustSupport property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMustSupport(Boolean value) {
        this.mustSupport = value;
    }

    /**
     * Gets the value of the isModifier property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean getIsModifier() {
        return isModifier;
    }

    /**
     * Sets the value of the isModifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsModifier(Boolean value) {
        this.isModifier = value;
    }

    /**
     * Gets the value of the isSummary property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean getIsSummary() {
        return isSummary;
    }

    /**
     * Sets the value of the isSummary property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsSummary(Boolean value) {
        this.isSummary = value;
    }

    /**
     * Gets the value of the binding property.
     * 
     * @return
     *     possible object is
     *     {@link ElementDefinitionBinding }
     *     
     */
    public ElementDefinitionBinding getBinding() {
        return binding;
    }

    /**
     * Sets the value of the binding property.
     * 
     * @param value
     *     allowed object is
     *     {@link ElementDefinitionBinding }
     *     
     */
    public void setBinding(ElementDefinitionBinding value) {
        this.binding = value;
    }

    /**
     * Gets the value of the mapping property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mapping property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMapping().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ElementDefinitionMapping }
     * 
     * 
     */
    public List<ElementDefinitionMapping> getMapping() {
        if (mapping == null) {
            mapping = new ArrayList<ElementDefinitionMapping>();
        }
        return this.mapping;
    }

}
